mutate(prediction_effort = rescale(prediction_effort, to = c(0,100)))
# Datafrane for regression
df.regression = df.long %>%
group_by(condition,clip) %>%
summarise(mean = mean(rating),
low = smean.cl.boot(rating)[2],
high = smean.cl.boot(rating)[3]
) %>%
ungroup() %>%
gather(index,value,-c(condition,clip)) %>%
unite(condition_index,condition,index) %>%
spread(condition_index,value) %>%
mutate(model_combined = lm(moral_mean~effort_mean+counterfactual_mean,data=.)$fitted.values,
model_effort = lm(moral_mean~effort_mean,data=.)$fitted.values,
model_counterfactual = lm(moral_mean~counterfactual_mean,data=.)$fitted.values) %>%
left_join(df.predictions) %>%
mutate(prediction_model_effort = lm(moral_mean~prediction_effort,data=.)$fitted.values,
prediction_model_combined = lm(moral_mean~prediction_effort+prediction_counterfactual,data=.)$fitted.values,
fitted_effort = lm(effort_mean~prediction_effort,data=.)$fitted.values)
# fit = lm(moral_mean~effort_mean + counterfactual_mean, data = df.regression) # Fit mean moral responses to effort+causal responses
# fit = lm(moral_mean~effort_mean, data = df.regression) # Fit mean moral responses to mean effort responses
fit = lm(effort_mean~prediction_effort, data = df.regression) # Fit mean effort responses to modeled effort
fit %>% summary()
cor(df.regression$moral_mean, df.regression$fitted_effort) # Participant moral judgment with fitted effort
cor(df.regression$moral_mean, df.regression$prediction_effort) # Participant moral judgment with model effort
cor(df.regression$moral_mean, df.regression$fitted_effort) # Participant moral judgment with fitted effort
cor(df.regression$moral_mean, df.regression$prediction_effort) # Participant moral judgment with model effort
cor(df.regression$moral_mean, df.regression$effort_mean) # Participant moral judgment with participant effort judgment
df.tmp = df.regression %>%
mutate(transformed_effort  =rescale(log(df.regression$prediction_effort+0.001), to = c(0,100)) ) %>%
select(transformed_effort, prediction_effort)
cor(df.regression$moral_mean, df.tmp$transformed_effort)
cor(df.regression$effort_mean, df.tmp$transformed_effort)
cor(df.regression$effort_mean, df.tmp$transformed_effort)
# Correlations
cor(df.regression$effort_mean, df.regression$prediction_effort) # Participant effort with model effort
ggplot(df.plot,aes(x=condition,y=rating,fill=condition))+
stat_summary(fun.y = mean, geom = 'bar', color = 'black')+
geom_point(aes(x=c('effort'),y=prediction_effort),color='dark red',size=3)+
geom_point(aes(x=c('counterfactual'),y=(1-prediction_counterfactual)*100),color='dark green',size=3)+
geom_point(aes(x=c('moral'),y=model_combined),color='dark blue',size=3)+ # Participants effort+causality response prediction
geom_point(aes(x=c('moral'),y=prediction_model_effort),color='red',shape=18,size=3)+ # Model effort prediction
geom_point(aes(x=c('moral'),y=prediction_model_combined),color='blue',shape=18,size=3)+ # Model effort+causality prediction
stat_summary(fun.data = mean_cl_boot, geom = 'errorbar', width = 0, color = 'black')+
facet_wrap(~clip,ncol=6)+
labs(y = 'Mean Judgments')+
theme(legend.position = 'bottom',
axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.title = element_blank()
)
df.plot = df.long %>%
# mutate(clip = as.factor(clip)) %>%
left_join(df.regression) %>%
mutate(clip = as.factor(clip))
ggplot(df.plot,aes(x=condition,y=rating,fill=condition))+
stat_summary(fun.y = mean, geom = 'bar', color = 'black')+
geom_point(aes(x=c('effort'),y=prediction_effort),color='dark red',size=3)+
geom_point(aes(x=c('counterfactual'),y=(1-prediction_counterfactual)*100),color='dark green',size=3)+
geom_point(aes(x=c('moral'),y=model_combined),color='dark blue',size=3)+ # Participants effort+causality response prediction
geom_point(aes(x=c('moral'),y=prediction_model_effort),color='red',shape=18,size=3)+ # Model effort prediction
geom_point(aes(x=c('moral'),y=prediction_model_combined),color='blue',shape=18,size=3)+ # Model effort+causality prediction
stat_summary(fun.data = mean_cl_boot, geom = 'errorbar', width = 0, color = 'black')+
facet_wrap(~clip,ncol=6)+
labs(y = 'Mean Judgments')+
theme(legend.position = 'bottom',
axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.title = element_blank()
)
cor(df.regression$effort_mean, df.regression$fitted_effort) # Participant moral judgment with fitted effort
cor(df.regression$moral_mean, df.regression$prediction_effort) # Participant moral judgment with model effort
# Correlations
cor(df.regression$effort_mean, df.regression$prediction_effort) # Participant effort with model effort
cor(df.regression$effort_mean, df.regression$fitted_effort) # Participant moral judgment with fitted effort
df.regression = df.long %>%
group_by(condition,clip) %>%
summarise(mean = mean(rating),
low = smean.cl.boot(rating)[2],
high = smean.cl.boot(rating)[3]
) %>%
ungroup() %>%
gather(index,value,-c(condition,clip)) %>%
unite(condition_index,condition,index) %>%
spread(condition_index,value) %>%
mutate(model_combined = lm(moral_mean~effort_mean+counterfactual_mean,data=.)$fitted.values,
model_effort = lm(moral_mean~effort_mean,data=.)$fitted.values,
model_counterfactual = lm(moral_mean~counterfactual_mean,data=.)$fitted.values) %>%
left_join(df.predictions) %>%
mutate(prediction_model_effort = lm(moral_mean~prediction_effort,data=.)$fitted.values,
prediction_model_combined = lm(moral_mean~prediction_effort+prediction_counterfactual,data=.)$fitted.values,
fitted_effort = lm(effort_mean~prediction_effort,data=.)$fitted.values+lm(effort_mean~prediction_effort,data=.)$offset)
View(fit)
# fit = lm(moral_mean~effort_mean + counterfactual_mean, data = df.regression) # Fit mean moral responses to effort+causal responses
# fit = lm(moral_mean~effort_mean, data = df.regression) # Fit mean moral responses to mean effort responses
fit = lm(effort_mean~prediction_effort, data = df.regression) # Fit mean effort responses to modeled effort
fit %>% summary()
# Dataframe for mk scenarios
df.mk = read.csv("../../data/model/effort_mk_planning.csv") %>%
left_join(read.csv("../../data/model/counterfactual_mk_planning_0.7.csv")) %>%
set_names(c("clip","prediction_effort","prediction_counterfactual"))
# Dataframe for counter scenarios
df.counter = read.csv("../../data/model/effort_counter_planning.csv") %>%
left_join(read.csv("../../data/model/counterfactual_counter_planning_0.7.csv")) %>%
set_names(c("clip","prediction_effort","prediction_counterfactual"))
# Dataframe for model predictions
df.predictions = rbind(df.mk,df.counter) %>%
mutate(clip = c(clip_number_name_map_mk, clip_number_name_map_counter))
df.predictions = df.predictions %>%
mutate(prediction_effort = rescale(prediction_effort, to = c(0,100)))
# Datafrane for regression
df.regression = df.long %>%
group_by(condition,clip) %>%
summarise(mean = mean(rating),
low = smean.cl.boot(rating)[2],
high = smean.cl.boot(rating)[3]
) %>%
ungroup() %>%
gather(index,value,-c(condition,clip)) %>%
unite(condition_index,condition,index) %>%
spread(condition_index,value) %>%
mutate(model_combined = lm(moral_mean~effort_mean+counterfactual_mean,data=.)$fitted.values,
model_effort = lm(moral_mean~effort_mean,data=.)$fitted.values,
model_counterfactual = lm(moral_mean~counterfactual_mean,data=.)$fitted.values) %>%
left_join(df.predictions) %>%
mutate(prediction_model_effort = lm(moral_mean~prediction_effort,data=.)$fitted.values,
prediction_model_combined = lm(moral_mean~prediction_effort+prediction_counterfactual,data=.)$fitted.values,
fitted_effort = lm(effort_mean~prediction_effort,data=.)$fitted.values)
ggplot(df.plot,aes(x=condition,y=rating,fill=condition))+
stat_summary(fun.y = mean, geom = 'bar', color = 'black')+
geom_point(aes(x=c('effort'),y=prediction_effort),color='dark red',size=3)+
geom_point(aes(x=c('counterfactual'),y=(1-prediction_counterfactual)*100),color='dark green',size=3)+
geom_point(aes(x=c('moral'),y=participant_model_combined),color='dark blue',size=3)+ # Participants effort+causality response prediction
geom_point(aes(x=c('moral'),y=prediction_model_effort),color='red',shape=18,size=3)+ # Model effort prediction
geom_point(aes(x=c('moral'),y=prediction_model_combined),color='blue',shape=18,size=3)+ # Model effort+causality prediction
stat_summary(fun.data = mean_cl_boot, geom = 'errorbar', width = 0, color = 'black')+
facet_wrap(~clip,ncol=6)+
labs(y = 'Mean Judgments')+
theme(legend.position = 'bottom',
axis.title.x = element_blank(),
axis.text.x = element_blank(),
legend.title = element_blank()
)
df.regression = df.long %>%
group_by(condition,clip) %>%
summarise(mean = mean(rating),
low = smean.cl.boot(rating)[2],
high = smean.cl.boot(rating)[3]
) %>%
ungroup() %>%
gather(index,value,-c(condition,clip)) %>%
unite(condition_index,condition,index) %>%
spread(condition_index,value) %>%
mutate(participant_model_combined = lm(moral_mean~effort_mean+counterfactual_mean,data=.)$fitted.values,
participant_model_effort = lm(moral_mean~effort_mean,data=.)$fitted.values,
participant_model_counterfactual = lm(moral_mean~counterfactual_mean,data=.)$fitted.values) %>%
left_join(df.predictions) %>%
mutate(prediction_model_effort = lm(moral_mean~prediction_effort,data=.)$fitted.values,
prediction_model_combined = lm(moral_mean~prediction_effort+prediction_counterfactual,data=.)$fitted.values,
fitted_effort = lm(effort_mean~prediction_effort,data=.)$fitted.values)
fit = lm(effort_mean~prediction_effort, data = df.regression) # Fit mean effort responses to modeled effort
fit %>% summary()
cor(df.regression$moral_mean, df.regression$prediction_effort) # Participant moral judgment with model effort
cor(df.regression$moral_mean, df.regression$prediction_effort) # Participant moral judgment with model effort
cor(df.regression$moral_mean, df.regression$fitted_effort) # Participant moral judgment with fitted effort
cor(df.regression$moral_mean, df.regression$prediction_effort) # Participant moral judgment with model effort
cor(df.regression$moral_mean, df.regression$fitted_effort) # Participant moral judgment with fitted effort
df.tmp = df.regression %>%
mutate(transformed_effort = rescale(df.regression$prediction_effort+100, to = c(0,100)) ) %>%
select(transformed_effort, prediction_effort)
cor(df.regression$moral_mean, df.tmp$transformed_effort)
ession$fitted_effort) # Participant moral judgment with fitted effort
cor(df.regression$moral_mean, df.regression$fitted_effort) # Participant moral judgment with fitted effort
cor(df.regression$moral_mean, df.regression$prediction_effort) # Participant moral judgment with model effort
# Correlations
cor(df.regression$effort_mean, df.regression$prediction_effort) # Participant effort with model effort
# Load packages  ------------------------------------------------------------------------------
library(scales)
library(Hmisc)
library(tidyjson)
library(magrittr)
library(corrr)
library(stringr)
library(svglite)
library(RSQLite)
library(ggrepel)
library(tidyverse)
rm(list = ls())
# Helper functions and variables ----------------------------------------------------------------------------
# set ggplot theme
theme_set(
theme_bw()+
theme(text = element_text(size = 30),
panel.grid = element_blank()
)
)
# rmse
rmse = function(x,y){
return(sqrt(mean((x-y)^2)))
}
# Luce's choice axiom
lca = function(x,y){
if (x+y == 0){
print("Hello")
return(0.5)
}
else{
return(x/(x+y))
}
}
# Vector of clips we can reconstruct in the planning model
clips_we_can_reconstruct <- c(1,3,4,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28)
clips_in_experiment_2 <- c(1,3,4,7,8,9,10,11,12)
# Experiment 1 clip number to name mapping
clip_number_name_map_mk = c(3,7,12,4,1,9,10,11,8)
clip_number_name_map_counter = c(20:28)
# EXP3: Read in and structure data ------------------------------------------------------------------
# con = dbConnect(SQLite(),dbname = "../javascript/experiment_3/participants.db");
con = dbConnect(SQLite(),dbname = "../../data/empirical/experiment3.db");
df.data = dbReadTable(con,"moral_dynamics")
dbDisconnect(con)
#filter out incompletes
df.data = df.data %>%
filter(status %in% 3:5) %>%
filter(!str_detect(uniqueid,'debug')) %>%
filter(codeversion == 'experiment_3')
# demographic data
df.demographics = df.data$datastring %>%
spread_values(condition = jnumber('condition'),
age = jnumber('questiondata','age'),
gender = jstring('questiondata','sex'),
feedback = jstring('questiondata','feedback')) %>%
rename(participant = document.id) %>%
mutate(time = difftime(df.data$endhit,df.data$beginhit,units = 'mins'))
# Structured trial dataframe
df.long = df.data$datastring %>%
as.tbl_json() %>% # Format datastring as json
spread_values(participant = jstring('workerId')) %>%
enter_object('data') %>% # Enter the data sub-object
gather_array('order') %>% # Gather order into column
enter_object('trialdata') %>% # Enter the tiral data responses
spread_values(clip = jstring('clip'),
display = jstring('order'),
rating = jnumber('rating')) %>%
as.data.frame() %>%
separate(clip, into = c('1', '2')) %>%
mutate(`1` = str_replace_all(`1`,"video","")) %>% # Leave only numbers
mutate(`2` = str_replace_all(`2`,"video","")) %>% # Leave only numbers
filter(`1` %in% clips_we_can_reconstruct) %>% # Filter out only clips we can reconstruct
filter(`2` %in% clips_we_can_reconstruct) %>% # Filter out only clips we can reconstruct
mutate(clips = paste(`1`,`2`,sep="_")) %>% # Create clip pair labels
mutate(rating = as.numeric(rating),
rating = ifelse(display == 'flipped', 7-rating, rating)) %>%
select(-c(display,`1`,`2`)) %>%
mutate(participant = factor(participant,labels = 1:length(unique(participant))))
# Unique stimuli dataframe
df.stimuli = df.long %>%
filter(participant == 1) %>%
select(trial,left,right)
# Moral Kinematics dataframe
df.kinematics = read.csv("../../data/empirical/moral_kinematics_results_selection.csv") %>%
filter(left %in% clips_we_can_reconstruct) %>% # Filter out only clips we can reconstruct
filter(right %in% clips_we_can_reconstruct)
# Dataframes for mk scenarios
df.mk = read.csv("../../data/model/effort_mk_planning.csv") %>%
left_join(read.csv("../../data/model/counterfactual_mk_planning_0.7.csv")) %>%
set_names(c("clip","effort","caused"))
# DAtaframe for counter scenarios
df.counter = read.csv("../../data/model/effort_counter_planning.csv") %>%
left_join(read.csv("../../data/model/counterfactual_counter_planning_0.7.csv")) %>%
set_names(c("clip","effort","caused"))
# Weight parameter
w = 0.9
# Dataframe for predictions
df.predictions = rbind(df.mk,df.counter) %>%
mutate(clip = c(clip_number_name_map_mk, clip_number_name_map_counter)) %>% # Left-join causality values and set column names
filter(clip != 'scenario') %>% # Filter out headers from csv file
filter(clip %in% clips_in_experiment_2) %>%
mutate_at(vars(effort,caused),funs(scaled = scale(.)[,])) %>%
mutate(model.additive = effort_scaled + caused_scaled,
model.weighted_additive = w*effort_scaled + (1-w)*caused_scaled, #weighted version
model.multiplicative = effort_scaled * caused_scaled)
# Regression dataframe
df.regression = df.long %>%
group_by(clips) %>%
summarise(rating = mean(rating)) %>%
ungroup() %>%
separate(clips,into = c('clip1','clip2'),sep="_") %>%
mutate_at(vars(contains('clip')),funs(as.numeric(.))) %>%
left_join(df.predictions %>% select(clip,contains("model")), by = c("clip1" = "clip")) %>%
rename(model.additive.clip1 = model.additive, # Rename column
model.weighted_additive.clip1 = model.weighted_additive, # Rename column
model.multiplicative.clip1 = model.multiplicative) %>% # Rename column
left_join(df.predictions %>% select(clip,contains("model")), by = c("clip2" = "clip")) %>%
rename(model.additive.clip2 = model.additive, # Rename column
model.weighted_additive.clip2 = model.weighted_additive, # Rename column
model.multiplicative.clip2 = model.multiplicative) %>% # Rename column
mutate(model.additive.prediction = model.additive.clip1-model.additive.clip2, # Substractive difference score
model.weighted_additive.prediction = model.weighted_additive.clip1-model.weighted_additive.clip2, # Substractive difference score
model.multiplicative.prediction = model.multiplicative.clip1-model.multiplicative.clip2, # Substractive difference score
fit.additive.prediction = lm(rating~model.additive.prediction,data=.)$fitted.values, # Fit substractive model
fit.weighted_additive.prediction = lm(rating~model.weighted_additive.prediction,data=.)$fitted.values, # Fit substractive model
fit.multiplicative.prediction = lm(rating~model.multiplicative.prediction,data=.)$fitted.values # Fit subtractive model
)
# Fit data and spit out summary
fit = lm(rating~model.additive.prediction,data=df.regression)
fit %>% summary()
# Correlation results
cor(df.regression$rating,df.regression$fit.additive.prediction) # Effort + Causality
cor(df.regression$rating,df.regression$fit.weighted_additive.prediction) # Effort + Causality
cor(df.regression$rating,df.regression$fit.multiplicative.prediction) # Effort
# EXP3: Plot Results - Means  -----------------------------------------------------
df.long %>%
group_by(participant) %>%
# mutate(rating = scale(rating)) %>%
ungroup %>%
ggplot(aes(x=clips,y=rating))+
geom_hline(yintercept = 0, linetype = 2, color = 'gray')+
stat_summary(fun.data = mean_cl_boot, geom = 'linerange', size = 0.5)+
stat_summary(fun.y = mean, geom = 'point', size = 3)+
geom_point(alpha = 0.2, position = position_jitter(width = 0.1, height = 0))+
geom_point(data = df.regression,aes(x=clip1,y=fit.weighted_additive.prediction),color='red',size=4,alpha=1)+
geom_point(data = df.regression,aes(x=clip1,y=fit.additive.prediction),color='blue',size=3,alpha=1)+
# geom_line(aes(group=participant),size=0.5,alpha=0.2)+
labs(y = 'Which action was worse?\n(1st Scenario vs. 2nd Scenario)', x = 'Scenarios')+
theme_bw()+
theme(text = element_text(size = 20),
panel.grid = element_blank(),
legend.position='bottom')
ggsave("../../figures/plots/experiment_3_mean_judgment_predictions.png",width=12,height=4)
# EXP3: Plot Results - Scatter  -----------------------------------------------------
# Correlation plot
df.regression %>%
ggplot(aes(x=mean,y=model.effort.causality))+
# stat_summary(y)+
geom_point()
# Correlation results
df.regression %$%
cor(mean,model.effort.causality)
# Correlation results
df.regression %$%
cor(mean,model.effort)
# EXP3: Plot Results - Collapsed Bar Graph Comparison  -----------------------------------------------------
# Plot dataframe
df.plot = df.long %>%
mutate(rating = ifelse(rating <= 3,1,0)) %>%
group_by(clips) %>%
summarise(rating.mean = mean(rating),
rating.high = smean.cl.boot(rating)[2],
rating.low = smean.cl.boot(rating)[3]
) %>%
ungroup() %>%
left_join(df.kinematics %>%
select(clips,kinematics = rating)) %>%
left_join(df.regression %>%
select(clips,model.effort.causality)) %>%
mutate(dynamics = df.regression$model.effort.causality) %>%
mutate(dynamics = lm(rating.mean~dynamics,data=.)$fitted.values) %>%
gather("index","rating",c(rating.mean,kinematics)) %>%
mutate_at(vars(rating.high,rating.low),funs(ifelse(index == 'kinematics',NA,.))) %>%
mutate(index = factor(index,levels = c('rating.mean','kinematics'), labels = c('experiment 1', 'moral kinematics')))
# Plotting df.plot
ggplot(df.plot,aes(x = clips, y = rating, group = index, fill = index))+
geom_bar(stat = 'identity',color = 'black', position = position_dodge(0.8), width = 0.8)+
geom_errorbar(aes(ymin = rating.low, ymax = rating.high),width=0,size=1, position = position_dodge(0.8), width = 0.8)+
geom_point(aes(x=clips, y = dynamics),shape = 21, color = 'black', fill = 'red' ,size=4)+
geom_hline(yintercept = 0.5, linetype = 2)+
# scale_fill_manual(values = c('lightblue',''))+
scale_fill_brewer(type = 'qual', palette = 3)+
scale_y_continuous(breaks = seq(0,1,0.25), labels = paste0(seq(0,100,25),"%"))+
coord_cartesian(ylim = c(0,1.05),x = c(0.4, 11.6), expand = F)+
labs(y = '% participants judging\nleft clip worse', fill = "",
x = "pair of clips")+
theme(legend.position = "bottom")
ggsave("../../figures/plots/experiment_3_collapsed_bars.pdf",width=14,height=6)
# Temporary dataframe for regression
tmp = df.long %>%
mutate(rating = ifelse(rating <= 3,1,0)) %>%
group_by(trial) %>%
summarise(rating.mean = mean(rating)) %>%
ungroup()
# Correlation results
cor(tmp$rating.mean,df.kinematics$rating) # Our empirical data to MK data
cor(tmp$rating.mean,df.prediction$dynamics) # Our empirical data to effort predictions
cor(df.kinematics$rating,df.prediction$dynamics) # MK data to effort predictions
# EXP 5 & 6: Read in and structure data ------------------------------------------------------------------
# Connect to database file and collect data
con = dbConnect(SQLite(),dbname = "../../data/empirical/experiment6.db");
df.data = dbReadTable(con,"moral_dynamics")
dbDisconnect(con)
# Filter out incomplete trials by users
df.data = df.data %>%
filter(status %in% 3:5) %>%
filter(!str_detect(uniqueid,'debug')) %>%
filter(codeversion %in% c('experiment_5','experiment_6'))
# Collect the demographic data
df.demographics = df.data$datastring %>%
spread_values(condition = jnumber('condition'),
age = jnumber('questiondata','age'),
gender = jstring('questiondata','sex'),
feedback = jstring('questiondata','feedback')
) %>%
mutate(experiment = df.data$codeversion,
condition = ifelse(experiment == 'experiment_6',3,condition)) %>%
rename(participant = document.id) %>%
mutate(time = difftime(df.data$endhit,df.data$beginhit,units = 'mins'),
condition = factor(condition,levels=0:3,labels = c('effort','counterfactual','moral','responsibility')))
# Structure the trial data
df.long = df.data$datastring %>% # Grab datastring
as.tbl_json() %>% # Structure it as a json
enter_object('data') %>% # Access the recorded data sub-object
gather_array('order') %>%
enter_object('trialdata') %>% # Access the recorded responses from the trials
gather_keys('index') %>%
append_values_string('values') %>%
as.data.frame() %>% # Compile everything into a dataframe
spread(index,values) %>% # Tidy up key:value pairs
mutate(clip = str_replace(clip,'video','')) %>% # Remove alphabetic characters from video names
mutate_at(vars(clip,response), funs(as.numeric)) %>% # Convert strings into integers
rename(participant = document.id) %>%
select(-condition) %>%
left_join(df.demographics %>% select(participant,condition)) %>%
rename(rating = response) %>%
arrange(participant)
# Load packages  ------------------------------------------------------------------------------
library(scales)
library(Hmisc)
library(tidyjson)
library(magrittr)
library(corrr)
library(stringr)
library(svglite)
library(RSQLite)
library(ggrepel)
library(tidyverse)
rm(list = ls())
# Helper functions and variables ----------------------------------------------------------------------------
# set ggplot theme
theme_set(
theme_bw()+
theme(text = element_text(size = 30),
panel.grid = element_blank()
)
)
# rmse
rmse = function(x,y){
return(sqrt(mean((x-y)^2)))
}
# Luce's choice axiom
lca = function(x,y){
if (x+y == 0){
return(0.5)
}
else{
return(x/(x+y))
}
}
# Vector of clips we can reconstruct in the planning model
clips_we_can_reconstruct <- c(1,3,4,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28)
clips_in_experiment_2 <- c(1,3,4,7,8,9,10,11,12)
# Experiment 1 clip number to name mapping
clip_number_name_map_mk = c(3,7,12,4,1,9,10,11,8)
clip_number_name_map_counter = c(20:28)
# EXP 7: Read in and structure data ------------------------------------------------------------------
# Connect to database file and collect data
con = dbConnect(SQLite(),dbname = "../../data/empirical/experiment7.db");
# con = dbConnect(SQLite(),dbname = "../javascript/experiment_7/participants.db");
df.data = dbReadTable(con,"moral_dynamics")
dbDisconnect(con)
# Filter out incomplete trials by users
df.data = df.data %>%
filter(status %in% 3:5) %>%
filter(!str_detect(uniqueid,'debug')) %>%
filter(codeversion %in% c('experiment_7'))
# Collect the demographic data
df.demographics = df.data$datastring %>%
spread_values(condition = jstring('condition'),
age = jstring('questiondata','age'),
gender = jstring('questiondata','sex'),
feedback = jstring('questiondata','feedback')
) %>%
mutate(time = difftime(df.data$endhit,df.data$beginhit,units = 'mins'),
condition = factor(condition,levels = 0:1, labels = c('effort','moral'))) %>%
rename(participant = document.id)
# Structure the trial data
df.long = df.data$datastring %>% # Grab datastring
as.tbl_json() %>% # Structure it as a json
enter_object('data') %>% # Access the recorded data sub-object
gather_array('order') %>%
enter_object('trialdata') %>% # Access the recorded responses from the trials
gather_object('index') %>%
append_values_string('values') %>%
as.data.frame() %>% # Compile everything into a dataframe
spread(index,values) %>% # Tidy up key:value pairs
rename(participant = document.id) %>%
select(-condition) %>%
left_join(df.demographics %>% select(participant,condition), by = 'participant') %>%
rename(rating = response) %>%
mutate(rating = as.numeric(rating)) %>%
arrange(participant)
View(df.demographics)
df.female = df.demographics %>% filter(gender %in% c('female'))
mean(df.female)
length(df.female)
View(df.female)
mean(df.demographics$age)
df.demographics %>% mutate(age = as.numeric(age))
mutate(df.demographics$age = as.numeric(df.demogrpahics$age))
df.demographics$age = as.numeric(df.demogrpahics$age)
df.demographics$age = as.numeric(df.demographics$age)
mean(df.demographics$age)
sd(df.demographics$age)
