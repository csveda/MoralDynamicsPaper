# Load packages  ------------------------------------------------------------------------------
library(scales)
library(Hmisc)
library(tidyjson)
library(magrittr)
library(corrr)
library(stringr)
library(svglite)
library(RSQLite)
library(ggrepel)
library(tidyverse)
rm(list = ls())

# Helper functions and variables ----------------------------------------------------------------------------
# set ggplot theme 
theme_set(
  theme_bw()+
    theme(text = element_text(size = 30),
          panel.grid = element_blank()
    )
)

# rmse
rmse = function(x,y){
  return(sqrt(mean((x-y)^2)))
}

# Luce's choice axiom
lca = function(x,y){
  if (x+y == 0){
    return(0.5)
  }
  else{
    return(x/(x+y))
  }
}

# Vector of clips we can reconstruct in the planning model
clips_we_can_reconstruct <- c(1,3,4,7,8,9,10,11,12,20,21,22,23,24,25,26,27,28)
clips_in_experiment_2 <- c(1,3,4,7,8,9,10,11,12)

# Experiment 1 clip number to name mapping
clip_number_name_map_mk = c(3,7,12,4,1,9,10,11,8)
clip_number_name_map_counter = c(20:28)

# EXP1: Read in and structure data ------------------------------------------------------------------

# con = dbConnect(SQLite(),dbname = "../javascript/experiment_1/participants.db");
# Connect to database file and collect data
con = dbConnect(SQLite(),dbname = "../../data/empirical/experiment1.db");
df.data = dbReadTable(con,"moral_dynamics")
dbDisconnect(con)

# Filter out incomplete trials by users
df.data = df.data %>% 
  filter(status %in% 3:5) %>% 
  filter(!str_detect(uniqueid,'debug')) %>% 
  filter(codeversion == 'experiment_1')

# Collect the demographic data 
df.demographics = df.data$datastring %>% 
  spread_values(condition = jnumber('condition'),
                age = jnumber('questiondata','age'),
                gender = jstring('questiondata','sex'),
                feedback = jstring('questiondata','feedback')
  ) %>% 
  rename(participant = document.id) %>% 
  mutate(time = difftime(df.data$endhit,df.data$beginhit,units = 'mins'))

# Structure the trial data 
df.long = df.data$datastring %>% # Grab datastring
  as.tbl_json() %>% # Structure it as a json
  spread_values(participant = jstring('workerId')) %>%
  enter_object('data') %>% # Access the recorded data sub-object
  gather_array('order') %>% 
  enter_object('trialdata') %>% # Access the recorded responses from the trials 
  gather_keys('index') %>% 
  append_values_string('values') %>% 
  as.data.frame() %>% # Compile everything into a dataframe
  spread(index,values) %>% # Tidy up key:value pairs
  mutate(clip = str_replace(clip,'video','')) %>% # Remove alphabetic characters from video names
  mutate_at(vars(clip,rating), funs(as.numeric)) %>% # Convert strings into integers
  mutate(participant = factor(participant,labels = 1:length(unique(participant))) %>% 
           as.character() %>% 
           as.numeric) %>% 
  arrange(participant) %>% 
  select(-document.id) %>%
  # Filter out those clips we can't reconstruct
  filter(clip %in% clips_we_can_reconstruct)

# EXP1: Model predictions ---------------------------------------------------------------------------------------

# Dataframes for mk scenarios
df.mk = read.csv("../../data/effort_mk_planning.csv") %>%
  left_join(read.csv("../../data/model/counterfactual_mk_planning_1.4.csv")) %>%
  set_names(c("clip","effort","counterfactual"))
# Dataframes for counter scenarios
df.counter = read.csv("../../data/model/effort_counter_planning.csv") %>%
  left_join(read.csv("../../data/model/counterfactual_counter_planning_1.4.csv")) %>%
  set_names(c("clip","effort","counterfactual"))
# Dataframe for predictions
df.predictions = rbind(df.mk,df.counter) %>%
  mutate(clip = c(clip_number_name_map_mk, clip_number_name_map_counter))
# Gather mean response from participants on stimuli
df.means = df.long %>% 
  group_by(clip) %>% 
  summarise(rating = mean(rating)) %>% 
  ungroup()
# Fitted model
df.model = df.means %>%
  left_join(df.predictions, by = c('clip')) %>%
  mutate_at(vars(effort,counterfactual),funs(scale(.)[,])) %>%
  mutate(model.effort.causality = lm(rating~effort+counterfactual,data=.)$fitted.values,
         model.effort = lm(rating~effort,data=.)$fitted.values,
         model.causality = lm(rating~counterfactual,data=.)$fitted.values)
# Fit and statistical summary
fit = lm(rating~effort+counterfactual,data=df.model)
fit %>% summary() 
# Correaltions
cor(df.model$rating, df.model$model.effort.causality)
cor(df.model$rating, df.model$model.effort)
cor(df.model$rating, df.model$model.causality)

# EXP1: Plot results - Means - Bar Plot  -------------------------------------------------------------------------------

# Plotting data against model predictions
df.plot = df.long %>% 
  group_by(clip) %>% 
  summarise(rating.low = smean.cl.boot(rating)[2],
            rating.high = smean.cl.boot(rating)[3]
  ) %>% 
  left_join(df.model) %>% 
  ungroup()
# Plot
ggplot(df.plot,aes(x=clip,y=rating))+
  geom_bar(stat = 'identity', size = 1, fill = 'lightblue', color = 'black',width=0.8)+
  geom_errorbar(aes(ymin = rating.low, ymax = rating.high),width=0,size=1)+
  geom_point(aes(y=model.effort),color='red',size=3)+
  geom_point(aes(y=model.causality),color='green',size=3)+
  geom_point(aes(y=model.effort.causality),color='blue',size=3)+
  scale_x_continuous(breaks = 1:28,labels = 1:28)#+
  # facet_grid(~outcome,scales = "free_x")

# EXP1: Plot results - Means - Line Plot  -------------------------------------------------------------------------------

# Plot mean results against model predictions
ggplot(df.plot, aes(x=clip,y=rating))+
  stat_summary(fun.data = mean_cl_boot, geom = 'linerange', size = 0.5)+
  stat_summary(fun.y = mean, geom = 'line', size = 1)+
  stat_summary(fun.y = mean, geom = 'point', size = 2)+
  geom_point(alpha = 0.2, position = position_jitter(width = 0.1, height = 0))+
  geom_line(aes(x=clip,y=model.effort),color='red',size=2,alpha=0.5)+
  geom_point(aes(x=clip,y=model.effort),color='red',size=2,alpha=0.5)+
  geom_line(aes(x=clip,y=model.effort.causality),color='blue',size=2,alpha=0.5)+
  geom_point(aes(x=clip,y=model.effort.causality),color='blue',size=2,alpha=0.5)+
  geom_line(aes(x=clip,y=model.causality),color='green',size=2,alpha=0.5)+
  geom_point(aes(x=clip,y=model.causality),color='green',size=2,alpha=0.5)+
  # geom_line(aes(group=participant),size=0.5,alpha=0.2)+
  labs(y = 'Badness rating', x = 'Scenario Number')+
  scale_x_continuous(breaks = 1:28,labels = 1:28)+
  theme_bw()+
  theme(text = element_text(size = 20),
    panel.grid = element_blank(),
    legend.position='bottom')

# EXP1: Plot Results - Scatter - Effort + Causality -------------------------------------------------------------------------------

# Plot Effort  Model
df.model %>%
  ggplot(aes(x = model.effort.causality, y = rating))+
  geom_point(stat='identity',size=3)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "blue")
# Good scenarios
df.model_good %>%
  ggplot(aes(x = model.effort.causality, y = rating))+
  geom_point(stat='identity',size=3)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "blue")
# Bad scenarios
df.model_bad %>%
  ggplot(aes(x = model.effort.causality, y = rating))+
  geom_point(stat='identity',size=3)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "blue")

# EXP1: Plot Results - Scatter - Effort -------------------------------------------------------------------------------

# Plot Causality Model
df.model %>%
  ggplot(aes(x = model.effort, y = rating))+
  geom_point(stat='identity',size=3)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "red")
# Good scenarios
df.model_good %>%
  ggplot(aes(x = model.effort, y = rating))+
  geom_point(stat='identity',size=3)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "red")
# Bad scenarios
df.model_bad %>%
  ggplot(aes(x = model.effort, y = rating))+
  geom_point(stat='identity',size=3)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "red")

# EXP1: Plot Results - Scatter - Causality -------------------------------------------------------------------------------

# Plot Effort + Causality Model
df.model %>%
  ggplot(aes(x = model.causality, y = rating))+
  geom_point(stat='identity',size=3)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "green")

df.model_good %>%
  ggplot(aes(x = model.causality, y = rating))+
  geom_point(stat='identity',size=3)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "green")

df.model_bad %>%
  ggplot(aes(x = model.causality, y = rating))+
  geom_point(stat='identity',size=3)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "green")
  
# ~~~~~~~~~~~~~ -------------------------------------------------------------------------------
# EXP2: Read in and structure data ------------------------------------------------------------------

# con = dbConnect(SQLite(),dbname = "../javascript/experiment_1/participants.db");
con = dbConnect(SQLite(),dbname = "../../data/empirical/experiment2.db");
df.data = dbReadTable(con,"moral_dynamics")
dbDisconnect(con)
#filter out incompletes 
df.data = df.data %>% 
  filter(status %in% 3:5) %>% 
  filter(!str_detect(uniqueid,'debug')) %>% 
  filter(codeversion == 'experiment_2')
# demographic data 
df.demographics = df.data$datastring %>% 
  spread_values(condition = jnumber('condition'),
                age = jnumber('questiondata','age'),
                gender = jstring('questiondata','sex'),
                feedback = jstring('questiondata','feedback')
  ) %>% 
  rename(participant = document.id) %>% 
  mutate(time = difftime(df.data$endhit,df.data$beginhit,units = 'mins'))
# trial data 
df.long = df.data$datastring %>% 
  as.tbl_json() %>% # Format datastring as json
  spread_values(participant = jstring('workerId')) %>%
  enter_object('data') %>% # Enter the data sub-object
  gather_array('order') %>% # Gather order into column
  enter_object('trialdata') %>% # Enter the tiral data responses
  spread_values(display = jstring('order'),
                rating = jnumber('rating')) %>%
  enter_object('clip') %>% # Enter the clips
  gather_array('index') %>% # Create column of indexes
  append_values_string('name') %>% 
  as.data.frame() %>% 
  select(-document.id) %>% 
  spread(index,name) %>% 
  # Needed to use planning model data
  mutate(`1` = str_replace_all(`1`,"video","")) %>% # Leave only numbers
  mutate(`2` = str_replace_all(`2`,"video","")) %>% # Leave only numbers
  filter(`1` %in% clips_we_can_reconstruct) %>% # Filter out only clips we can reconstruct
  filter(`2` %in% clips_we_can_reconstruct) %>% # Filter out only clips we can reconstruct
  mutate(clips = paste(`1`,`2`,sep="_")) %>% # Create clip pair labels
  mutate(rating = ifelse(display == 'flipped',100-rating,rating)) %>% # Adjust rating according to flip
  mutate(clips = str_replace_all(clips,"video","")) %>% 
  mutate(rating = rating-50) %>% 
  select(-c(display,`1`,`2`)) %>% 
  mutate(participant = factor(participant,labels = 1:length(unique(participant))))
# results from moral kinematics paper
df.kinematics = read.csv("../../data/empirical/moral_kinematics_results.csv",stringsAsFactors = F)

# EXP2: Model predictions  --------------------------------------------------------------------

# Dataframes for mk scenarios
df.mk = read.csv("../../data/model/effort_mk_planning.csv") %>%
  left_join(read.csv("../../data/model/counterfactual_mk_planning_1.4.csv")) %>%
  set_names(c("clip","effort","caused"))
# Dataframe for counter scenarios
df.counter = read.csv("../../data/model/effort_counter_planning.csv") %>%
  left_join(read.csv("../../data/model/counterfactual_counter_planning_1.4.csv")) %>%
  set_names(c("clip","effort","caused"))
# Weight parameter
w = 0.3
# Dataframe for predictions
df.predictions = rbind(df.mk,df.counter) %>%
  mutate(clip = c(clip_number_name_map_mk, clip_number_name_map_counter)) %>% # Left-join causality values and set column names
  filter(clip != 'scenario') %>% # Filter out headers from csv file
  filter(clip %in% clips_in_experiment_2) %>% 
  mutate_at(vars(effort,caused),funs(scaled = scale(.)[,])) %>% 
  mutate(model.additive = effort_scaled + caused_scaled,
         model.weighted_additive = w*effort_scaled + (1-w)*caused_scaled, #weighted version
         model.multiplicative = effort_scaled * caused_scaled)
# Regression dataframe
df.regression = df.long %>% 
  group_by(clips) %>% 
  summarise(rating = mean(rating)) %>% 
  ungroup() %>% 
  separate(clips,into = c('clip1','clip2'),sep="_") %>% 
  mutate_at(vars(contains('clip')),funs(as.numeric(.))) %>% 
  left_join(df.predictions %>% select(clip,contains("model")), by = c("clip1" = "clip")) %>% 
  rename(model.additive.clip1 = model.additive, # Rename column
         model.weighted_additive.clip1 = model.weighted_additive, # Rename column
         model.multiplicative.clip1 = model.multiplicative) %>% # Rename column
  left_join(df.predictions %>% select(clip,contains("model")), by = c("clip2" = "clip")) %>% 
  rename(model.additive.clip2 = model.additive, # Rename column
         model.weighted_additive.clip2 = model.weighted_additive, # Rename column
         model.multiplicative.clip2 = model.multiplicative) %>% # Rename column
  mutate(model.additive.prediction = model.additive.clip1-model.additive.clip2, # Substractive difference score
         model.weighted_additive.prediction = model.weighted_additive.clip1-model.weighted_additive.clip2, # Substractive difference score
         model.multiplicative.prediction = model.multiplicative.clip1-model.multiplicative.clip2, # Substractive difference score
         fit.additive.prediction = lm(rating~model.additive.prediction,data=.)$fitted.values, # Fit substractive model
         fit.weighted_additive.prediction = lm(rating~model.weighted_additive.prediction,data=.)$fitted.values, # Fit substractive model
         fit.multiplicative.prediction = lm(rating~model.multiplicative.prediction,data=.)$fitted.values # Fit subtractive model
  ) 
# Fit data and spit out summary
fit = lm(rating~model.additive.prediction,data=df.regression)
fit %>% summary()
# Correlation results
cor(df.regression$rating,df.regression$fit.additive.prediction) # Effort + Causality
cor(df.regression$rating,df.regression$fit.weighted_additive.prediction) # Effort + Causality
cor(df.regression$rating,df.regression$fit.multiplicative.prediction) # Effort

# EXP2: Plot Results - Means  -------------------------------------------------------------------------------

df.long %>% 
  group_by(participant) %>%
  # mutate(rating = scale(rating)) %>%
  ungroup %>%
  ggplot(aes(x=clips,y=rating))+
  geom_hline(yintercept = 0, linetype = 2, color = 'gray')+
  stat_summary(fun.data = mean_cl_boot, geom = 'linerange', size = 0.5)+
  stat_summary(fun.y = mean, geom = 'point', size = 3)+
  geom_point(alpha = 0.2, position = position_jitter(width = 0.1, height = 0))+
  geom_point(data = df.regression,aes(x=clip1,y=fit.weighted_additive.prediction),color='red',size=4,alpha=1)+
  geom_point(data = df.regression,aes(x=clip1,y=fit.additive.prediction),color='blue',size=3,alpha=1)+
  # geom_line(aes(group=participant),size=0.5,alpha=0.2)+
  labs(y = 'Which action was worse?\n(1st Scenario vs. 2nd Scenario)', x = 'Scenarios')+
  theme_bw()+
  theme(text = element_text(size = 20),
        panel.grid = element_blank(),
        legend.position='bottom')

# EXP2: Plot Results - Scatter ------------------------------------------------------------------------

# Correlation plot
df.regression %>% 
  ggplot(aes(x=mean,y=model.effort.causality))+
  # stat_summary(y)+
  geom_point()

# Correlation results
df.regression %$% 
  cor(mean,model.effort.causality)

# Correlation results
df.regression %$% 
  cor(mean,model.effort)
  
# EXP2: Plot Results - Bar (comparison with kinematics paper results) ------------------------------------------------------------------------

df.long %>% 
  group_by(clips) %>% 
  summarise(proportion = sum(rating<0)/n()) %>% 
  left_join(df.kinematics %>% filter(clips != 'N/a')) %>% 
  select(-trial) %>% 
  gather(index,value,-clips) %>% 
  mutate(index = factor(index,levels = c('rating','proportion'),labels = c('Moral Kinematics','Experiment 2'))) %>% 
  ggplot(aes(x = clips, y = value, group = index,fill = index))+
  geom_bar(stat='identity', position = position_dodge(0.9),color = 'black',width=0.9)+
  geom_hline(yintercept = 0.5,linetype=2,size=1)+
  scale_fill_brewer(type='qual',palette=3)+
  theme_bw()+
  labs(y = '% first clip worse', fill = '')+
  theme(panel.grid = element_blank(),
        legend.position = 'top',
        text = element_text(size=20))+
  ggsave("../../figures/plots/experiment_2_mean_judgment_comparisons.pdf",width=12,height=4)

# ~~~~~~~~~~~~~ -------------------------------------------------------------------------------
# EXP3: Read in and structure data ------------------------------------------------------------------

# con = dbConnect(SQLite(),dbname = "../javascript/experiment_3/participants.db");
con = dbConnect(SQLite(),dbname = "../../data/empirical/experiment3.db");
df.data = dbReadTable(con,"moral_dynamics")
dbDisconnect(con)

#filter out incompletes 
df.data = df.data %>% 
  filter(status %in% 3:5) %>% 
  filter(!str_detect(uniqueid,'debug')) %>%
  filter(codeversion == 'experiment_3')

# demographic data 
df.demographics = df.data$datastring %>% 
  spread_values(condition = jstring('condition'),
                age = jstring('questiondata','age'),
                gender = jstring('questiondata','sex'),
                feedback = jstring('questiondata','feedback')) %>% 
  rename(participant = document.id) %>% 
  mutate(time = difftime(df.data$endhit,df.data$beginhit,units = 'mins'))

# Structured trial dataframe 
df.long = df.data$datastring %>% 
  as.tbl_json() %>% # Format datastring as json
  spread_values(participant = jstring('workerId')) %>%
  enter_object('data') %>% # Enter the data sub-object
  gather_array('order') %>% # Gather order into column
  enter_object('trialdata') %>% # Enter the tiral data responses
  spread_values(clip = jstring('clip'),
                display = jstring('order'),
                rating = jstring('rating')) %>%
  as.data.frame() %>% 
  separate(clip, into = c('1', '2')) %>%
  mutate(`1` = str_replace_all(`1`,"video","")) %>% # Leave only numbers
  mutate(`2` = str_replace_all(`2`,"video","")) %>% # Leave only numbers
  filter(`1` %in% clips_we_can_reconstruct) %>% # Filter out only clips we can reconstruct
  filter(`2` %in% clips_we_can_reconstruct) %>% # Filter out only clips we can reconstruct
  mutate(clips = paste(`1`,`2`,sep="_")) %>% # Create clip pair labels
  mutate(rating = as.numeric(rating),
         rating = ifelse(display == 'flipped', 7-rating, rating)) %>% 
  select(-c(display,`1`,`2`)) %>% 
  mutate(participant = factor(participant,labels = 1:length(unique(participant))))

# Moral Kinematics dataframe
df.kinematics = read.csv("../../data/empirical/moral_kinematics_results_selection.csv") %>%
  filter(left %in% clips_we_can_reconstruct) %>% # Filter out only clips we can reconstruct
  filter(right %in% clips_we_can_reconstruct)

# EXP3: Model predictions  --------------------------------------------------------------------

# Dataframes for mk scenarios
df.mk = read.csv("../../data/model/effort_mk_planning.csv") %>%
  left_join(read.csv("../../data/model/counterfactual_mk_planning_0.7.csv")) %>%
  set_names(c("clip","effort","caused"))

# Dataframe for predictions
df.model = df.mk %>%
  mutate(clip = c(clip_number_name_map_mk)) %>% # Left-join causality values and set column names
  filter(clip != 'scenario') %>% # Filter out headers from csv file
  filter(clip %in% clips_in_experiment_2)

# Temp
df.predictions = df.long %>% 
  mutate(clip_pairs = clips) %>%
  group_by(clips) %>% 
  summarise(rating = mean(rating)) %>% 
  ungroup() %>% 
  separate(clips,into = c('clip1','clip2'),sep="_") %>%
  mutate_at(vars(contains('clip')),funs(as.numeric(.))) %>% 
  left_join(df.model %>% 
              select(clip,effort,caused), by = c("clip1" = "clip")) %>%
  left_join(df.model %>% 
              select(clip,effort,caused), by = c("clip2" = "clip")) %>%
  rename(effort.1 = effort.x) %>%
  rename(caused.1 = caused.x) %>%
  rename(effort.2 = effort.y) %>%
  rename(caused.2 = caused.y) %>%
  mutate(lca = lca(effort.1,effort.2),
         fit = lm(rating~lca,data=.)$fitted.values,
         clips = paste(clip1,clip2,sep="_"),
         index = 'Model',
         rating.low = lca,
         rating.high = lca,
         rating = lca) %>%
  select('clips','rating','rating.low','rating.high','index')

# EXP3: Plot Results - Means  -----------------------------------------------------

df.long %>% 
  group_by(participant) %>%
  ungroup %>%
  ggplot(aes(x=clips,y=rating))+
  geom_hline(yintercept = 0, linetype = 2, color = 'gray')+
  stat_summary(fun.data = mean_cl_boot, geom = 'linerange', size = 0.5)+
  stat_summary(fun.y = mean, geom = 'point', size = 6)+
  geom_point(alpha = 0.2, position = position_jitter(width = 0.1, height = 0))+
  geom_point(data = df.tmp,aes(x=clips,y=fit),color='blue',size=6,alpha=1)+
  # geom_point(data = df.tmp,aes(x=clips,y=diff),color='blue',size=3,alpha=1)+
  # geom_line(aes(group=participant),size=0.5,alpha=0.2)+
  labs(y = 'Which was worse?\n(1st Video vs. 2nd Video)', x = 'Video Pairs')+
  theme_bw()+
  theme(text = element_text(size = 20),
        panel.grid = element_blank(),
        legend.position='bottom')
ggsave("../../figures/plots/experiment_3_mean_judgment_predictions.pdf",width=12,height=4)

# EXP3: Plot Results - Scatter  -----------------------------------------------------

# Correlation plot
df.regression %>% 
  ggplot(aes(x=mean,y=model.effort.causality))+
  # stat_summary(y)+
  geom_point()

# Correlation results
df.regression %$% 
  cor(mean,model.effort.causality)

# Correlation results
df.regression %$% 
  cor(mean,model.effort)

# EXP3: Plot Results - Collapsed Bar Graph Comparison  -----------------------------------------------------

df.plot = df.long %>% 
  mutate(rating = ifelse(rating <= 3,1,0)) %>% 
  group_by(clips) %>% 
  summarise(rating.mean = mean(rating),
            rating.high = smean.cl.boot(rating)[2],
            rating.low = smean.cl.boot(rating)[3]
  ) %>% 
  ungroup() %>% 
  left_join(df.kinematics %>% select(clips,kinematics = rating)) %>%
  gather("index","rating",c(rating.mean,kinematics)) %>% 
  mutate_at(vars(rating.high,rating.low),funs(ifelse(index == 'kinematics',rating,.))) %>% 
  mutate(index = factor(index,levels = c('rating.mean','kinematics'), labels = c('Experiment 1', 'Moral Kinematics'))) %>%
  mutate(clips = as.factor(clips)) %>%
  select('clips', 'index','rating','rating.low','rating.high') %>%
  rbind(df.predictions)

ggplot(df.plot,aes(x=index,y=rating,fill=index))+
  geom_bar(stat = 'identity',color = 'black', position = position_dodge(0.8), width = 0.8)+
  geom_linerange(data=df.plot,aes(ymin=rating.low,ymax=rating.high), position = position_dodge(0.8), width = 0.8)+
  facet_wrap(~clips,ncol=6)+
  labs(y = 'Percent Particpants Judging\nLeft Video as Worse')+
  scale_y_continuous(breaks=c(1.0,0.5,0),labels=c('100%','50%','0%'))+
  theme_bw()+
  theme(legend.position = 'right',
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.text.y = element_text(size=18),
        legend.title = element_blank()
  )

# EXP3: Plot Results - Individual Collapsed Bar Graph Comparison  -----------------------------------------------------

# i = 1
for(i in c(1:9)){
  df.tmp = df.plot %>%
    filter(clips %in% c(toString(df.plot[i,]$clips))) %>%
    mutate(clips = str_replace_all(clips,"_"," vs "))
  
  ggplot(df.tmp,aes(x=index,y=rating,fill=index))+
    geom_bar(stat = 'identity',color = 'black', position = position_dodge(0.8), width = 0.8)+
    geom_hline(yintercept = 0.5, linetype = 2, color = 'black')+
    geom_linerange(data=df.tmp,aes(ymin=rating.low,ymax=rating.high), position = position_dodge(0.8), width = 0.8)+
    labs(y = '')+
    scale_y_continuous(limits=c(0, 1.0),breaks=c(1.0,0.5,0),labels=c('100%','50%','0%'))+
    scale_fill_grey(start = 0.5, end = .9)+
    theme_bw()+
    theme(legend.position = 'none',
          axis.title.x = element_blank(),
          axis.text.x = element_blank(),
          axis.text.y = element_text(size=30,face='bold'),
          legend.title = element_blank()
    )
  ggsave(paste("../../figures/plots/experiment_3/collapsed_mean_",toString(toString(df.plot[i,]$clips)),".pdf"),width=8,height=4)
}

# EXP3: Plot Results - Sideways Bar Graph Comparison  -----------------------------------------------------

# Plot dataframe
df.plot = df.long %>% 
  mutate(rating = ifelse(rating <= 3,1,0)) %>% 
  group_by(clips) %>% 
  summarise(rating.mean = mean(rating),
            # rating.opposite = -1*mean(rating),#+.5,
            rating.high = smean.cl.boot(rating)[2],#/2.0,
            rating.low = smean.cl.boot(rating)[3]#/2.0
  ) %>% 
  ungroup() %>% 
  left_join(df.kinematics %>% 
              # mutate(rating = rating -0.5) %>%
              select(clips,kinematics = rating)) %>% 
  left_join(df.tmp %>% 
              select(clips,fit)) %>% 
  mutate(dynamics = df.tmp$fit) %>%
  mutate(dynamics = lm(rating.mean~dynamics,data=.)$fitted.values) %>% 
  gather("index","rating",c(rating.mean,kinematics)) %>% 
  mutate_at(vars(rating.high,rating.low),funs(ifelse(index == 'kinematics',NA,.))) %>% 
  mutate(index = factor(index,levels = c('rating.mean','kinematics'), labels = c('Experiment 1', 'Moral Kinematics'))) #%>%

# Plotting df.plot
ggplot(df.plot,aes(x = clips, y = rating, group = index, fill = index))+
  geom_bar(stat = 'identity',color = 'black', position = position_dodge(0.8), width = 0.8)+
  geom_errorbar(aes(ymin = rating.low, ymax = rating.high),width=0,size=1, position = position_dodge(0.8), width = 0.8)+
  # geom_point(aes(x=clips, y = dynamics),shape = 21, color = 'black', fill = 'red' ,size=6)+
  # geom_point(aes(x=clips, y = rating.opposite),shape = 16, color = 'white', fill = 'white' ,size=6)+ # Ugly hacks make the world go round
  geom_hline(yintercept = 0.5, linetype = 2)+
  geom_hline(yintercept = 0.0, linetype = 1)+
  geom_hline(yintercept = 1, linetype = 1)+
  # scale_fill_manual(values = c('lightblue',''))+
  scale_fill_brewer(type = 'qual', palette = 3)+
  scale_y_continuous(breaks = seq(0,1.0,0.25), labels = paste0(seq(0,100,25),"%"))+
  coord_cartesian(ylim = c(0,1.05),x = c(0.4, 11.6), expand = F)+
  labs(y = '% Participants Judging Left Video\nAs Worse', fill = "",
       x = "Video Pairs")+
  coord_flip() + scale_y_reverse() +
  theme(legend.position = "bottom",
        axis.ticks.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank())
ggsave("../../figures/plots/experiment_3_sideways_bars.pdf",width=14,height=20)

# ~~~~~~~~~~~~~ -------------------------------------------------------------------------------
# EXP4: Read in and structure data ------------------------------------------------------------------

# con = dbConnect(SQLite(),dbname = "../javascript/experiment_4/participants.db");
con = dbConnect(SQLite(),dbname = "../../data/empirical/experiment4.db");
df.data = dbReadTable(con,"moral_dynamics")
dbDisconnect(con)

#filter out incompletes 
df.data = df.data %>% 
  filter(status %in% 3:5) %>% 
  filter(!str_detect(uniqueid,'debug')) %>% 
  filter(codeversion == 'experiment_4')

# demographic data 
df.demographics = df.data$datastring %>% 
  spread_values(condition = jstring('condition'),
                age = jstring('questiondata','age'),
                gender = jstring('questiondata','sex'),
                feedback = jstring('questiondata','feedback')
  ) %>% 
  rename(participant = document.id) %>% 
  mutate(time = difftime(df.data$endhit,df.data$beginhit,units = 'mins'))

# trial data 
df.long = df.data$datastring %>% 
  as.tbl_json() %>% 
  spread_values(participant = jstring('workerId')) %>%
  enter_object('data') %>%
  gather_array('order') %>% 
  enter_object('trialdata') %>% 
  gather_object('index') %>% 
  append_values_string('values') %>% 
  as.data.frame() %>% 
  spread(index,values) %>% 
  mutate(clip = str_replace(clip,'video','')) %>% 
  mutate_at(vars(clip,rating),funs(as.numeric)) %>% 
  mutate(participant = factor(participant,labels = 1:length(unique(participant))) %>% as.character() %>% as.numeric) %>% 
  arrange(participant) %>% 
  select(-document.id) 

df.stimuli = read.csv("../../data/model/exp4_stimuli.csv",stringsAsFactors = F)

# EXP4: Model predictions  --------------------------------------------------------------------

# Gather mean response from participants on stimuli
df.means = df.long %>% 
  left_join(df.stimuli) %>% 
  group_by(clip,clip.name,outcome,intervention,effort.type,causality) %>% 
  summarise(rating = mean(rating)) %>% 
  ungroup()
# Read in model data
df.good_effort = read.csv("../../data/model/effort_exp_4_good_planning.csv",stringsAsFactors = F)
df.bad_effort = read.csv("../../data/model/effort_exp_4_bad_planning.csv",stringsAsFactors = F)
df.good_causality = read.csv("../../data/model/counterfactual_exp_4_good_planning_1.4.csv",stringsAsFactors = F)
df.bad_causality = read.csv("../../data/model/counterfactual_exp_4_bad_planning_1.4.csv",stringsAsFactors = F)
# Dataframes containing model data from good and bad clips
df.good_clips = df.good_effort %>% 
  left_join(df.good_causality)
df.bad_clips = df.bad_effort %>% 
  left_join(df.bad_causality)
# Model for both bad and good stimuli
df.model = df.means %>% 
  left_join(rbind(df.good_clips,df.bad_clips), by = c('clip.name' = 'scenario')) %>% 
  # filter(clip %in% c(13:20)) %>% 
  mutate_at(vars(effort,counterfactual),funs(ifelse(outcome == 'negative',-.,.))) %>% # Make effort + causality values negative for bad
  mutate_at(vars(effort,counterfactual),funs(scale(.)[,])) %>%
  mutate(model.effort.causality = lm(rating~effort+counterfactual,data=.)$fitted.values,
         model.effort = lm(rating~effort,data=.)$fitted.values,
         model.causality = lm(rating~counterfactual,data=.)$fitted.values)
# Dataframe with good scenarios
df.model_good =df.model %>%
  filter(outcome == 'positive') 
# Dataframe with bad scenarios
df.model_bad =df.model %>%
  filter(outcome == 'negative')
# Create a linear model fit to the good and bad scenarios
fit = lm(rating~effort+counterfactual,data=df.model)
fit %>% summary() # Detail statistical summary
# Correlations of each dataframe
cor(df.model_good$rating,df.model_good$model.effort.causality) # Good scenarios
cor(df.model_bad$rating,df.model_bad$model.effort.causality) # Bad scenarios
cor(df.model$rating,df.model$model.effort.causality) # Both scenarios

# EXP4: Plot Results - Means  -------------------------------------------------------------------------------

# Plotting data against model predictions
df.plot = df.long %>% 
  group_by(clip) %>% 
  summarise(rating.low = smean.cl.boot(rating)[2],
            rating.high = smean.cl.boot(rating)[3]
            ) %>% 
  left_join(df.model) %>% 
  mutate_at(vars(contains('rating'),contains('model')),funs(ifelse(outcome == 'negative',(100-.)-50,.-50))
            ) %>% 
  ungroup()
# Plot
ggplot(df.plot,aes(x=clip,y=rating))+
  geom_bar(stat = 'identity', size = 1, fill = 'lightblue', color = 'black',width=0.8)+
  geom_errorbar(aes(ymin = rating.low, ymax = rating.high),width=0,size=1)+
  geom_point(aes(y=model.effort),color='red',size=3)+
  geom_point(aes(y=model.causality),color='green',size=3)+
  geom_point(aes(y=model.effort.causality),color='blue',size=3)+
  scale_x_continuous(breaks = 1:24,labels = 1:24)+
  facet_grid(~outcome,scales = "free_x")
# ggsave("../../figures/plots/experiment_4_mean_judgment_predictions_good+bad.png",width=12,height=6)
  
# EXP4: Plot Results - Scatter - Effort + Causality -------------------------------------------------------------------------------

# Plot Effort  Model
df.model %>%
  ggplot(aes(x = model.effort.causality, y = rating))+
  geom_point(stat='identity',size=3)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "blue")
ggsave("../../figures/experiment_4_regression_good+bad.pdf")
ggsave("../../figures/experiment_4_regression_good+bad.png")
# Good scenarios
df.model_good %>%
  ggplot(aes(x = model.effort.causality, y = rating))+
  geom_point(stat='identity',size=3)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "blue")
ggsave("../../figures/experiment_4_regression_good.pdf")
ggsave("../../figures/experiment_4_regression_good.png")
# Bad scenarios
df.model_bad %>%
  ggplot(aes(x = model.effort.causality, y = rating))+
  geom_point(stat='identity',size=3)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "blue")
ggsave("../../figures/experiment_4_regression_bad.pdf")
ggsave("../../figures/experiment_4_regression_bad.png")

# EXP4: Plot Results - Scatter - Effort -------------------------------------------------------------------------------

# Plot Causality Model
df.model %>%
  ggplot(aes(x = model.effort, y = rating))+
  geom_point(stat='identity',size=3)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "red")
ggsave("../../figures/experiment_4_regression_good+bad.pdf")
ggsave("../../figures/experiment_4_regression_good+bad.png")
# Good scenarios
df.model_good %>%
  ggplot(aes(x = model.effort, y = rating))+
  geom_point(stat='identity',size=3)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "red")
ggsave("../../figures/experiment_4_regression_good.pdf")
ggsave("../../figures/experiment_4_regression_good.png")
# Bad scenarios
df.model_bad %>%
  ggplot(aes(x = model.effort, y = rating))+
  geom_point(stat='identity',size=3)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "red")
ggsave("../../figures/experiment_4_regression_bad.pdf")
ggsave("../../figures/experiment_4_regression_bad.png")

# EXP4: Plot Results - Scatter - Causality -------------------------------------------------------------------------------

# Plot Effort + Causality Model
df.model %>%
  ggplot(aes(x = model.causality, y = rating))+
  geom_point(stat='identity',size=3)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "green")
ggsave("../../figures/experiment_4_regression_good+bad.pdf")
ggsave("../../figures/experiment_4_regression_good+bad.png")

df.model_good %>%
  ggplot(aes(x = model.causality, y = rating))+
  geom_point(stat='identity',size=3)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "green")
ggsave("../../figures/experiment_4_regression_good.pdf")
ggsave("../../figures/experiment_4_regression_good.png")

df.model_bad %>%
  ggplot(aes(x = model.causality, y = rating))+
  geom_point(stat='identity',size=3)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "green")
ggsave("../../figures/experiment_4_regression_bad.pdf")
ggsave("../../figures/experiment_4_regression_bad.png")

# EXP4: Scatter plot  -------------------------------------------------------------------------------

df.plot = df.long %>% 
  group_by(clip) %>% 
  summarise(rating.mean = mean(rating),
            rating.low = smean.cl.boot(rating)[2],
            rating.high = smean.cl.boot(rating)[3]
            ) %>% 
  left_join(df.model %>% select(clip,prediction))

ggplot(df.plot,aes(x=prediction,y=rating.mean))+
  geom_abline(intercept = 0, slope = 1, linetype = 2)+
  geom_hline(yintercept = 50, linetype = 2)+
  geom_vline(xintercept = 50, linetype = 2)+
  geom_smooth(method = "lm", color = "black")+
  geom_point(stat='identity',size=3)+
  geom_errorbar(aes(ymin = rating.low,ymax = rating.high),width=0, size = 1)+
  # geom_text(label = aes(clip))+
  # annotate(geom = 'text', x = 0, y = 75, label = 'morally good', size = 8, angle = 90)+
  annotate(geom = 'text', x = 0, y = 25, label = 'morally bad', size = 8, angle = 90)+
  labs(x = 'model prediction', y = 'moral judgments')+
  coord_cartesian(xlim = c(0,100), 
                  ylim = c(0,100))
# ggsave("../../figures/plots/exp2_scatter.pdf",width=8,height=6)

# EXP4: Plot Results - Bar Graph of Factors  -----------------------------------------------------------------------------

# Dataframe for plot
df.plot = df.long %>% 
  left_join(df.stimuli) %>% 
  mutate(rating = ifelse(outcome == 'negative',100-rating,rating))

# Plot dataframe
ggplot(df.plot,aes(x = causality, y = rating, group = effort.type, fill = effort.type))+
  stat_summary(fun.y = mean, geom = 'bar', color ='black',position = position_dodge(0.9),width=0.9)+
  stat_summary(fun.data = mean_cl_boot, geom = 'errorbar', color ='black',position = position_dodge(0.9),width=0)+
  facet_grid(intervention~outcome)
  
ggsave("../../figures/plots/experiment_4_factors.png", width=8, height=6)

# ~~~~~~~~~~~~~ -------------------------------------------------------------------------------
# EXP 5 & 6: Read in and structure data ------------------------------------------------------------------
# Connect to database file and collect data
con = dbConnect(SQLite(),dbname = "../../data/empirical/experiment6.db");
df.data = dbReadTable(con,"moral_dynamics")
dbDisconnect(con)

# Filter out incomplete trials by users
df.data = df.data %>% 
  filter(status %in% 3:5) %>% 
  filter(!str_detect(uniqueid,'debug')) %>%
  filter(codeversion %in% c('experiment_5','experiment_6'))

# Collect the demographic data 
df.demographics = df.data$datastring %>% 
  spread_values(condition = jstring('condition'),
                age = jstring('questiondata','age'),
                gender = jstring('questiondata','sex'),
                feedback = jstring('questiondata','feedback')
  ) %>%
  mutate(experiment = df.data$codeversion,
         condition = ifelse(experiment == 'experiment_6',3,condition)) %>% 
  rename(participant = document.id) %>% 
  mutate(time = difftime(df.data$endhit,df.data$beginhit,units = 'mins'),
         condition = factor(condition,levels=0:3,labels = c('effort','counterfactual','moral','responsibility')))

# Structure the trial data 
df.long = df.data$datastring %>% # Grab datastring
  as.tbl_json() %>% # Structure it as a json
  enter_object('data') %>% # Access the recorded data sub-object
  gather_array('order') %>% 
  enter_object('trialdata') %>% # Access the recorded responses from the trials 
  gather_object('index') %>% 
  append_values_string('values') %>% 
  as.data.frame() %>% # Compile everything into a dataframe
  spread(index,values) %>% # Tidy up key:value pairs
  mutate(clip = str_replace(clip,'video','')) %>% # Remove alphabetic characters from video names
  mutate_at(vars(clip,response), funs(as.numeric)) %>% # Convert strings into integers
  rename(participant = document.id) %>% 
  select(-condition) %>% 
  left_join(df.demographics %>% select(participant,condition)) %>% 
  rename(rating = response) %>% 
  arrange(participant)

# EXP 5 & 6: Regression ------------------------------------------------------------------

# Dataframe for mk scenarios
df.mk = read.csv("../../data/model/effort_mk_planning.csv") %>%
  left_join(read.csv("../../data/model/counterfactual_mk_planning_0.7.csv")) %>%
  set_names(c("clip","effort_prediction","counterfactual_prediction"))
# Dataframe for counter scenarios
df.counter = read.csv("../../data/model/effort_counter_planning.csv") %>%
  left_join(read.csv("../../data/model/counterfactual_counter_planning_0.7.csv")) %>%
  set_names(c("clip","effort_prediction","counterfactual_prediction"))
# Dataframe for model predictions
df.predictions = rbind(df.mk,df.counter) %>%
  mutate(clip = c(clip_number_name_map_mk, clip_number_name_map_counter))
# df.predictions = df.predictions
# %>%
  # mutate(effort_prediction = rescale(effort_prediction, to = c(0,100)))

# Datafrane for regression
df.regression = df.long %>% 
  group_by(condition,clip) %>% 
  summarise(mean = mean(rating),
            low = smean.cl.boot(rating)[2],
            high = smean.cl.boot(rating)[3]
            ) %>% 
  ungroup() %>% 
  gather(index,value,-c(condition,clip)) %>% 
  unite(condition_index,condition,index) %>% 
  spread(condition_index,value) %>% 
  mutate(moral_empirical_combined = lm(moral_mean~effort_mean+counterfactual_mean,data=.)$fitted.values,
         moral_empirical_effort = lm(moral_mean~effort_mean,data=.)$fitted.values,
         moral_empirical_counterfactual = lm(moral_mean~counterfactual_mean,data=.)$fitted.values) %>%
  left_join(df.predictions) %>%
  mutate(moral_model_effort = lm(moral_mean~effort_prediction,data=.)$fitted.values,
         moral_model_combined = lm(moral_mean~effort_prediction+counterfactual_prediction,data=.)$fitted.values,
         # effort_model = lm(effort_mean~effort_prediction,data=.)$fitted.values)
         effort_model = rescale(effort_prediction,to = c(0,100)))

fit = lm(moral_mean~effort_mean,data=df.regression)
fit %>% summary()
cor(df.regression$effort_prediction, df.regression$effort_mean)

# EXP 5 & 6: Plot - Scatterplot --------------------------------------------------------------------

df.plot = df.regression 

# ggplot(df.plot,aes(x=model_combined,y=moral_mean))+
# ggplot(df.plot,aes(x=participant_model_effort,y=moral_mean))+
ggplot(df.plot,aes(x=effort_mean,y=rescale(effort_prediction,to=c(0,100))))+
  geom_abline(intercept = 0, slope = 1, linetype = 2)+
  geom_smooth(method=lm,color='black')+
  # geom_errorbar(aes(ymin = effort_low, ymax = effort_high),width=0)+
  geom_point(size=2)+
  geom_text_repel(aes(label = clip),size=5)+
  # coord_cartesian(xlim=c(25,100),ylim=c(25,100))+
  coord_cartesian(xlim=c(0,100),ylim=c(0,100))+
  scale_x_continuous(breaks = seq(0,100,25),labels = seq(0,100,25))+
  scale_y_continuous(breaks = seq(0,100,25),labels = seq(0,100,25))+
  labs(y = 'Physics Engine Values', x = 'Mean Effort Judgment')
ggsave("../../figures/plots/experiment_5_mean_effort_effort_judgement_scatter.pdf",width=12,height=8)
# EXP 5 & 6: Plot - Bars --------------------------------------------------------------------

df.plot = df.long %>%
  left_join(df.regression) %>%
  mutate(clip = as.factor(clip))

ggplot(df.plot,aes(x=condition,y=rating,fill=condition))+
  stat_summary(fun.y = mean, geom = 'bar', color = 'black')+
  geom_point(aes(x=c('effort'),y=effort_model),color='dark red',size=3)+
  geom_point(aes(x=c('counterfactual'),y=(1-counterfactual_prediction)*100),color='dark green',size=3)+
  geom_point(aes(x=c('moral'),y=moral_empirical_combined),color='dark blue',size=3)+ # Participants effort+causality response prediction
  geom_point(aes(x=c('moral'),y=moral_model_effort),color='red',shape=18,size=3)+ # Model effort prediction
  geom_point(aes(x=c('moral'),y=moral_model_combined),color='blue',shape=18,size=3)+ # Model effort+causality prediction
  stat_summary(fun.data = mean_cl_boot, geom = 'errorbar', width = 0, color = 'black')+
  facet_wrap(~clip,ncol=6)+
  labs(y = 'Mean Judgments')+
  theme(legend.position = 'bottom',
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        legend.title = element_blank()
        )
# ggsave("../../figures/plots/experiment_5_mean_judgement_predictions.pdf",width=12,height=8)

# EXP 5 & 6: Plot - Split Bars --------------------------------------------------------------------

df.plot = df.long %>%
  left_join(df.regression) %>%
  mutate(clip = as.factor(clip)) %>%
  filter(clip %in% c(1,3,4,7,8,9))
  # filter(clip %in% c(10,11,12,20,21,22))
  # filter(clip %in% c(23,24,25,26,27,28))

ggplot(df.plot,aes(x=condition,y=rating,fill=condition))+
  stat_summary(fun.y = mean, geom = 'bar', color = 'black')+
  geom_point(aes(x=c('effort'),y=rescale(effort_prediction,to=c(0,100))),color='red',size=4)+
  geom_point(aes(x=c('counterfactual'),y=(1-counterfactual_prediction)*100),color='green',size=4)+
  # geom_point(aes(x=c('moral'),y=moral_empirical_combined),color='dark blue',size=3)+ # Participants effort+causality response prediction
  geom_point(aes(x=c('moral'),y=moral_model_effort),color='blue',shape=18,size=4)+ # Model effort prediction
  # geom_point(aes(x=c('moral'),y=moral_model_combined),color='blue',shape=18,size=3)+ # Model effort+causality prediction
  stat_summary(fun.data = mean_cl_boot, geom = 'errorbar', width = 0, color = 'black')+
  facet_wrap(~clip,ncol=6)+
  labs(y = '')+
  theme(legend.position = 'none',
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        legend.title = element_blank()
  )
ggsave("../../figures/plots/experiment_5_mean_judgement_predictions_1.pdf",width=12,height=3)

# ~~~~~~~~~~~~~ -------------------------------------------------------------------------------
# EXP 7: Read in and structure data ------------------------------------------------------------------
# Connect to database file and collect data
con = dbConnect(SQLite(),dbname = "../../data/empirical/experiment7.db");
# con = dbConnect(SQLite(),dbname = "../javascript/experiment_7/participants.db");
df.data = dbReadTable(con,"moral_dynamics")
dbDisconnect(con)

# Filter out incomplete trials by users
df.data = df.data %>% 
  filter(status %in% 3:5) %>% 
  filter(!str_detect(uniqueid,'debug')) %>%
  filter(codeversion %in% c('experiment_7'))

# Collect the demographic data 
df.demographics = df.data$datastring %>% 
  spread_values(condition = jstring('condition'),
                age = jstring('questiondata','age'),
                gender = jstring('questiondata','sex'),
                feedback = jstring('questiondata','feedback')
  ) %>%
  mutate(time = difftime(df.data$endhit,df.data$beginhit,units = 'mins'),
         condition = factor(condition,levels = 0:1, labels = c('effort','moral'))) %>% 
  rename(participant = document.id)

# Structure the trial data 
df.long = df.data$datastring %>% # Grab datastring
  as.tbl_json() %>% # Structure it as a json
  enter_object('data') %>% # Access the recorded data sub-object
  gather_array('order') %>% 
  enter_object('trialdata') %>% # Access the recorded responses from the trials 
  gather_object('index') %>% 
  append_values_string('values') %>% 
  as.data.frame() %>% # Compile everything into a dataframe
  spread(index,values) %>% # Tidy up key:value pairs
  rename(participant = document.id) %>% 
  select(-condition) %>% 
  left_join(df.demographics %>% select(participant,condition), by = 'participant') %>% 
  rename(rating = response) %>% 
  mutate(rating = as.numeric(rating)) %>% 
  arrange(participant)

# EXP 7: Regression ------------------------------------------------------------------

# Effort predictions from Moral Dyanmics model 
df.model = read.csv("../../data/model/effort_exp7.csv")

# Datafrane for regression
df.regression = df.long %>% 
  group_by(condition,clip) %>% 
  summarise(mean = mean(rating),
            low = smean.cl.boot(rating)[2],
            high = smean.cl.boot(rating)[3]
  ) %>% 
  ungroup() %>% 
  gather(index,value,-c(condition,clip)) %>% 
  unite(condition_index,condition,index) %>% 
  spread(condition_index,value) %>% 
  left_join(df.model, by = c('clip'='names')) %>% 
  mutate(effort_model = lm(effort_mean~effort,data=.)$fitted.values,
         moral_effort_empirical = lm(moral_mean~effort_mean,data=.)$fitted.values,
         moral_effort_model = lm(moral_mean~effort,data=.)$fitted.values)

fit = lm(moral_mean~moral_effort_model,data=df.regression)
fit %>% summary()
cor(df.regression$effort_model, df.regression$effort_mean) # Correlate model effort with effort judgments
cor(df.regression$moral_effort_empirical, df.regression$moral_mean) # Correlate effort judgment with moral judgments
cor(df.regression$moral_effort_model, df.regression$moral_mean) # Correlate model predictions with moral judgments

# EXP 7: Plot - Scatterplot --------------------------------------------------------------------

df.plot = df.long %>% 
  mutate(rating = as.numeric(rating)) %>% 
  group_by(clip,condition) %>% 
  summarise(mean = mean(rating)) %>% 
  spread(condition,mean) %>% 
  ungroup() %>% 
  select(clip,effort,moral)

# ggplot(df.plot,aes(x=model_combined,y=moral_mean))+
# ggplot(df.plot,aes(x=participant_model_effort,y=moral_mean))+
ggplot(df.plot,aes(x=effort,y=moral))+
  geom_abline(intercept = 0, slope = 1, linetype = 2)+
  geom_smooth(method=lm,color='black')+
  # geom_errorbar(aes(ymin = effort_low, ymax = effort_high),width=0)+
  geom_point(size=2)+
  # geom_text_repel(aes(label = clip),size=5)+
  # coord_cartesian(xlim=c(25,100),ylim=c(25,100))+
  coord_cartesian(xlim=c(0,100),ylim=c(0,100))+
  scale_x_continuous(breaks = seq(0,100,25),labels = seq(0,100,25))+
  scale_y_continuous(breaks = seq(0,100,25),labels = seq(0,100,25))+
  labs(y = 'Moral', x = 'Effort')
# ggsave("../../figures/plots/experiment_5_mean_effort_effort_judgement_scatter.pdf",width=12,height=8)

# EXP 7: Plot - Bars --------------------------------------------------------------------

df.plot = df.long %>%
  left_join(df.regression) %>%
  mutate(clip = as.factor(clip)) #%>%
  # filter(clip %in% c('harm_moving_moving','harm_moving_static','harm_static_static','harm_static_moving','victim_moving_moving','victim_moving_static'))
  # filter(clip %in% c('victim_static_moving','victim_static_static','video1','video10','video11','video12'))
  # filter(clip %in% c('video3','video4','video7','video8','video9'))

ggplot(df.plot,aes(x=condition,y=rating,fill=condition))+
  stat_summary(fun.y = mean, geom = 'bar', color = 'black')+
  geom_point(aes(x=c('effort'),y=effort_model),color='black',shape=21,size=6)+
  geom_point(aes(x=c('moral'),y=moral_effort_model),color='black',fill='light grey',shape=21,size=6)+ # Model effort prediction
  stat_summary(fun.data = mean_cl_boot, geom = 'errorbar', width = 0, color = 'black')+
  facet_wrap(~clip,ncol=6)+
  scale_y_continuous(limits=c(0, 105),breaks=c(100,50,0),labels=c('100','50','0'))+
  scale_fill_grey(start = 0.5, end = .9)+
  labs(y = ' ')+
  theme(legend.position = 'none',
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        strip.text.x = element_blank(),
        legend.title = element_blank(),
        panel.spacing.y = unit(13, "lines")
  )
ggsave("../../figures/plots/experiment_7_mean_judgement_predictions.pdf",width=14,height=16)

# ~~~~~~~~~~~~~ -------------------------------------------------------------------------------
# Combine participant.db files  ---------------------------------------------------------------

df.participants = data.frame()

for(i in 1:4){
  con = dbConnect(SQLite(),dbname = paste0("../../data/experiment",i,".db"))
  tmp = dbReadTable(con,"moral_dynamics")
  dbDisconnect(con)
  df.participants = rbind(df.participants,tmp)
}

df.participants = df.participants %>% 
  distinct() #remove duplicates

con = dbConnect(SQLite(), paste0("../../data/participants.db"))
dbWriteTable(con,'moral_dynamics',df.participants)
dbDisconnect(con)


